{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport './inputprofile.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { auth, db } from \"../../firebase\";\nimport { doc, updateDoc } from \"firebase/firestore\";\nfunction InputProfile() {\n  _s();\n  const [profileData, setProfileData] = useState({\n    name: \"\",\n    birthCity: \"\",\n    birthState: \"\",\n    birthDate: \"\",\n    birthTime: \"\"\n  });\n  const navigate = useNavigate();\n  const user = auth.currentUser;\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setProfileData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    //Make sure all fields are filled in\n    if (!profileData.name || !profileData.birthCity || profileData.birthState || profileData.birthDate || profileData.birthTime) {\n      alert(\"Please fill in all fields.\");\n      return;\n    }\n    try {\n      //Update user doc in Firestore with their completed profile.\n      const userRef = doc(db, \"users\", user.uid);\n      await updateDoc(userRef, {\n        name: profileData.name,\n        birthCity: profileData.birthCity,\n        birthState: profileData.birthState,\n        birthDate: profileData.birthDate,\n        birthTime: profileData.birthTime,\n        profileComplete: true\n      });\n      navigate('/home');\n    } catch (error) {\n      console.error(\"Error update profile: \", error);\n    }\n  };\n  reutn();\n}\n_s(InputProfile, \"Lk8zaUCHMrC/EogRVTrPMuVnt2c=\", false, function () {\n  return [useNavigate];\n});\n_c = InputProfile;\nexport default InputProfile;\nvar _c;\n$RefreshReg$(_c, \"InputProfile\");","map":{"version":3,"names":["React","useNavigate","useState","auth","db","doc","updateDoc","InputProfile","_s","profileData","setProfileData","name","birthCity","birthState","birthDate","birthTime","navigate","user","currentUser","handleInputChange","e","value","target","prevState","handleSubmit","preventDefault","alert","userRef","uid","profileComplete","error","console","reutn","_c","$RefreshReg$"],"sources":["/Users/lilahdurney/Desktop/StarSync/src/pages/inputprofile/inputprofile.js"],"sourcesContent":["import React from 'react';\nimport './inputprofile.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { auth, db } from \"../../firebase\";\nimport { doc, updateDoc } from \"firebase/firestore\";\n\n\nfunction InputProfile () {\n    const [profileData, setProfileData] = useState({\n        name: \"\",\n        birthCity: \"\",\n        birthState: \"\",\n        birthDate: \"\",\n        birthTime: \"\",\n    });\n\n    const navigate = useNavigate();\n    const user = auth.currentUser;\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setProfileData((prevState) => ({\n            ...prevState,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = async(e) => {\n        e.preventDefault();\n\n        //Make sure all fields are filled in\n        if (!profileData.name || !profileData.birthCity ||profileData.birthState ||profileData.birthDate || profileData.birthTime) {\n            alert(\"Please fill in all fields.\");\n            return;\n        }\n\n        try {\n            //Update user doc in Firestore with their completed profile.\n            const userRef = doc(db, \"users\", user.uid);\n            await updateDoc(userRef, {\n                name: profileData.name,\n                birthCity: profileData.birthCity,\n                birthState: profileData.birthState,\n                birthDate: profileData.birthDate,\n                birthTime: profileData.birthTime,\n                profileComplete: true,\n\n            });\n\n            navigate('/home');\n        } catch (error) {\n            console.error(\"Error update profile: \", error);\n        }\n    }\n\n\n    reutn (\n        \n    )\n\n    \n\n}\n\nexport default InputProfile;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB;AAC3B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,IAAI,EAAEC,EAAE,QAAQ,gBAAgB;AACzC,SAASC,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AAGnD,SAASC,YAAYA,CAAA,EAAI;EAAAC,EAAA;EACrB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC;IAC3CS,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE;EACf,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAMgB,IAAI,GAAGd,IAAI,CAACe,WAAW;EAE7B,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC7B,MAAM;MAAET,IAAI;MAAEU;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAChCZ,cAAc,CAAEa,SAAS,KAAM;MAC3B,GAAGA,SAAS;MACZ,CAACZ,IAAI,GAAGU;IACZ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMG,YAAY,GAAG,MAAMJ,CAAC,IAAK;IAC7BA,CAAC,CAACK,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI,CAAChB,WAAW,CAACE,IAAI,IAAI,CAACF,WAAW,CAACG,SAAS,IAAGH,WAAW,CAACI,UAAU,IAAGJ,WAAW,CAACK,SAAS,IAAIL,WAAW,CAACM,SAAS,EAAE;MACvHW,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACJ;IAEA,IAAI;MACA;MACA,MAAMC,OAAO,GAAGtB,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEa,IAAI,CAACW,GAAG,CAAC;MAC1C,MAAMtB,SAAS,CAACqB,OAAO,EAAE;QACrBhB,IAAI,EAAEF,WAAW,CAACE,IAAI;QACtBC,SAAS,EAAEH,WAAW,CAACG,SAAS;QAChCC,UAAU,EAAEJ,WAAW,CAACI,UAAU;QAClCC,SAAS,EAAEL,WAAW,CAACK,SAAS;QAChCC,SAAS,EAAEN,WAAW,CAACM,SAAS;QAChCc,eAAe,EAAE;MAErB,CAAC,CAAC;MAEFb,QAAQ,CAAC,OAAO,CAAC;IACrB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAGDE,KAAK,CAEL,CAAC;AAIL;AAACxB,EAAA,CAvDQD,YAAY;EAAA,QASAN,WAAW;AAAA;AAAAgC,EAAA,GATvB1B,YAAY;AAyDrB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}