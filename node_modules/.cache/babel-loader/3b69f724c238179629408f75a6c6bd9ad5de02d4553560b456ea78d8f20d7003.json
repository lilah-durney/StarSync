{"ast":null,"code":"var _jsxFileName = \"/Users/lilahdurney/Desktop/StarSync/src/pages/login/login.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { getAuth, GoogleAuthProvider, EmailAuthProvider, onAuthStateChanged } from 'firebase/auth';\nimport firebase from \"firebase/compat/app\";\nimport * as firebaseui from \"firebaseui\";\nimport \"firebaseui/dist/firebaseui.css\";\nimport { app } from \"../../firebase\";\nimport { useNavigate } from \"react-router-dom\";\nimport { auth, db } from \"../../firebase\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    //Initilize FirebaseUI Auth instance\n    const ui = firebaseui.auth.AuthUI.getInstance() || new firebaseui.auth.AuthUI(getAuth(app));\n    ui.start(\"#firebaseui-auth-container\", {\n      signInOptions: [{\n        provider: GoogleAuthProvider.PROVIDER_ID,\n        customParameters: {\n          prompt: \"select_account\"\n        }\n      }, {\n        provider: EmailAuthProvider.PROVIDER_ID\n      }],\n      signInSuccessUrl: \"/inputprofile\"\n    });\n\n    //Check if user has logged in before\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        //If user exists, check if they've completed their profile.\n        const userRef = doc(db, \"users\", user.uid);\n        const docSnap = await getDoc(userRef);\n        if (!docSnap.exists()) {\n          //If user document doesn't exist (meaning they haven't created an account) then create it.\n          await setDoc(userRef, {\n            email: user.email,\n            profileComplete: false,\n            //This then changes once then create profile in Input Profile page\n            createdAt: new Date()\n          });\n          navigate(\"/inputprofile\");\n        } else {\n          //If user document exists, then check profile completion.\n          const userData = docSnap.data();\n          if (userData.profileComplete) {\n            navigate(\"/home\");\n          } else {\n            navigate(\"/inputprofile\");\n          }\n        }\n      }\n    });\n    return () => {\n      unsubscribe();\n      ui.reset();\n    };\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"firebaseui-auth-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 8\n  }, this);\n}\n_s(Login, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useEffect","getAuth","GoogleAuthProvider","EmailAuthProvider","onAuthStateChanged","firebase","firebaseui","app","useNavigate","auth","db","doc","setDoc","getDoc","jsxDEV","_jsxDEV","Login","_s","navigate","ui","AuthUI","getInstance","start","signInOptions","provider","PROVIDER_ID","customParameters","prompt","signInSuccessUrl","unsubscribe","user","userRef","uid","docSnap","exists","email","profileComplete","createdAt","Date","userData","data","reset","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lilahdurney/Desktop/StarSync/src/pages/login/login.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { getAuth, GoogleAuthProvider, EmailAuthProvider, onAuthStateChanged } from 'firebase/auth'; \nimport firebase from \"firebase/compat/app\";\nimport * as firebaseui from \"firebaseui\";\nimport \"firebaseui/dist/firebaseui.css\";\nimport {app} from \"../../firebase\";\nimport {useNavigate} from \"react-router-dom\";\nimport {auth,db} from \"../../firebase\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\n\nfunction Login() {\n    const navigate = useNavigate();\n    useEffect(() => {\n        //Initilize FirebaseUI Auth instance\n        const ui = \n            firebaseui.auth.AuthUI.getInstance() ||\n            new firebaseui.auth.AuthUI(getAuth(app));\n\n    ui.start(\"#firebaseui-auth-container\", {\n        signInOptions: [\n            {\n                provider: GoogleAuthProvider.PROVIDER_ID,\n                customParameters: {\n                  prompt: \"select_account\",\n                },\n              },\n            {\n                provider: EmailAuthProvider.PROVIDER_ID\n            },\n        ],\n        signInSuccessUrl: \"/inputprofile\",\n    });\n    \n\n\n    //Check if user has logged in before\n    const unsubscribe = onAuthStateChanged(auth, async(user) => {\n        if (user) {\n            //If user exists, check if they've completed their profile.\n            const userRef = doc(db, \"users\", user.uid);\n            const docSnap = await getDoc(userRef);\n\n            if (!docSnap.exists()) {\n                //If user document doesn't exist (meaning they haven't created an account) then create it.\n                await setDoc(userRef, {\n                    email: user.email,\n                    profileComplete: false, //This then changes once then create profile in Input Profile page\n                    createdAt: new Date(),\n                });\n                navigate(\"/inputprofile\")\n            } else {\n                //If user document exists, then check profile completion.\n                const userData = docSnap.data();\n                if (userData.profileComplete) {\n                    navigate(\"/home\");\n                } else {\n                    navigate(\"/inputprofile\");\n                }\n            }\n        }\n    });\n\n\n \n    return () => {\n        unsubscribe(); \n        ui.reset();\n    };\n}, [navigate]);\n\n\n\n\n\nreturn <div id=\"firebaseui-auth-container\"></div>\n\n\n\n\n}\n\nexport default Login"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,eAAe;AAClG,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,KAAKC,UAAU,MAAM,YAAY;AACxC,OAAO,gCAAgC;AACvC,SAAQC,GAAG,QAAO,gBAAgB;AAClC,SAAQC,WAAW,QAAO,kBAAkB;AAC5C,SAAQC,IAAI,EAACC,EAAE,QAAO,gBAAgB;AACtC,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9BR,SAAS,CAAC,MAAM;IACZ;IACA,MAAMmB,EAAE,GACJb,UAAU,CAACG,IAAI,CAACW,MAAM,CAACC,WAAW,CAAC,CAAC,IACpC,IAAIf,UAAU,CAACG,IAAI,CAACW,MAAM,CAACnB,OAAO,CAACM,GAAG,CAAC,CAAC;IAEhDY,EAAE,CAACG,KAAK,CAAC,4BAA4B,EAAE;MACnCC,aAAa,EAAE,CACX;QACIC,QAAQ,EAAEtB,kBAAkB,CAACuB,WAAW;QACxCC,gBAAgB,EAAE;UAChBC,MAAM,EAAE;QACV;MACF,CAAC,EACH;QACIH,QAAQ,EAAErB,iBAAiB,CAACsB;MAChC,CAAC,CACJ;MACDG,gBAAgB,EAAE;IACtB,CAAC,CAAC;;IAIF;IACA,MAAMC,WAAW,GAAGzB,kBAAkB,CAACK,IAAI,EAAE,MAAMqB,IAAI,IAAK;MACxD,IAAIA,IAAI,EAAE;QACN;QACA,MAAMC,OAAO,GAAGpB,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEoB,IAAI,CAACE,GAAG,CAAC;QAC1C,MAAMC,OAAO,GAAG,MAAMpB,MAAM,CAACkB,OAAO,CAAC;QAErC,IAAI,CAACE,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;UACnB;UACA,MAAMtB,MAAM,CAACmB,OAAO,EAAE;YAClBI,KAAK,EAAEL,IAAI,CAACK,KAAK;YACjBC,eAAe,EAAE,KAAK;YAAE;YACxBC,SAAS,EAAE,IAAIC,IAAI,CAAC;UACxB,CAAC,CAAC;UACFpB,QAAQ,CAAC,eAAe,CAAC;QAC7B,CAAC,MAAM;UACH;UACA,MAAMqB,QAAQ,GAAGN,OAAO,CAACO,IAAI,CAAC,CAAC;UAC/B,IAAID,QAAQ,CAACH,eAAe,EAAE;YAC1BlB,QAAQ,CAAC,OAAO,CAAC;UACrB,CAAC,MAAM;YACHA,QAAQ,CAAC,eAAe,CAAC;UAC7B;QACJ;MACJ;IACJ,CAAC,CAAC;IAIF,OAAO,MAAM;MACTW,WAAW,CAAC,CAAC;MACbV,EAAE,CAACsB,KAAK,CAAC,CAAC;IACd,CAAC;EACL,CAAC,EAAE,CAACvB,QAAQ,CAAC,CAAC;EAMd,oBAAOH,OAAA;IAAK2B,EAAE,EAAC;EAA2B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAKjD;AAAC7B,EAAA,CArEQD,KAAK;EAAA,QACOR,WAAW;AAAA;AAAAuC,EAAA,GADvB/B,KAAK;AAuEd,eAAeA,KAAK;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}