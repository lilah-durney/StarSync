{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { getAuth, GoogleAuthProvider, EmailAuthProvider, onAuthStateChanged } from 'firebase/auth';\nimport firebase from \"firebase/compat/app\";\nimport * as firebaseui from \"firebaseui\";\nimport \"firebaseui/dist/firebaseui.css\";\nimport { app } from \"../../firebase\";\nimport { useNavigate } from \"react-router-dom\";\nfunction Login() {\n  _s();\n  useEffect(() => {\n    //Initilize FirebaseUI Auth instance\n    const ui = firebaseui.auth.AuthUI.getInstance() || new firebaseui.auth.AuthUI(getAuth(app));\n    ui.start(\"#firebaseui-auth-container\", {\n      signInOptions: [{\n        provider: GoogleAuthProvider.PROVIDER_ID,\n        customParameters: {\n          prompt: \"select_account\"\n        }\n      }, {\n        provider: EmailAuthProvider.PROVIDER_ID\n      }],\n      signInSuccessUrl: \"/inputprofile\"\n    });\n  }, []);\n\n  //Check if user has logged in before\n  const auth = getAuth(app);\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      //If the user exists, check if they've completed their profile w/ bday info\n      const userRef = firebase.database().ref(\"users/\" + user.uid);\n      userRef.once(\"value\", snapshot => {\n        const userData = snapshot.val();\n        if (userData && userData.profileComplete) {\n          //If profileComplete is true, then redeirct to User Home\n          navigate(\"/home\");\n        } else {\n          //If no profile exists or incomplete, redirect to Input Profile\n          navigate(\"/inputprofile\");\n        }\n      });\n    }\n  });\n  return () => {\n    ui.reset();\n  };\n}\n_s(Login, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useEffect","getAuth","GoogleAuthProvider","EmailAuthProvider","onAuthStateChanged","firebase","firebaseui","app","useNavigate","Login","_s","ui","auth","AuthUI","getInstance","start","signInOptions","provider","PROVIDER_ID","customParameters","prompt","signInSuccessUrl","user","userRef","database","ref","uid","once","snapshot","userData","val","profileComplete","navigate","reset","_c","$RefreshReg$"],"sources":["/Users/lilahdurney/Desktop/StarSync/src/pages/login/login.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { getAuth, GoogleAuthProvider, EmailAuthProvider, onAuthStateChanged } from 'firebase/auth'; \nimport firebase from \"firebase/compat/app\";\nimport * as firebaseui from \"firebaseui\";\nimport \"firebaseui/dist/firebaseui.css\";\nimport {app} from \"../../firebase\";\nimport {useNavigate} from \"react-router-dom\";\n\nfunction Login() {\n    \n    useEffect(() => {\n        //Initilize FirebaseUI Auth instance\n        const ui = \n            firebaseui.auth.AuthUI.getInstance() ||\n            new firebaseui.auth.AuthUI(getAuth(app));\n\n    ui.start(\"#firebaseui-auth-container\", {\n        signInOptions: [\n            {\n                provider: GoogleAuthProvider.PROVIDER_ID,\n                customParameters: {\n                  prompt: \"select_account\",\n                },\n              },\n            {\n                provider: EmailAuthProvider.PROVIDER_ID\n            }\n        ],\n        signInSuccessUrl: \"/inputprofile\",\n    });\n    },[]);\n\n\n    //Check if user has logged in before\n    const auth =getAuth(app);\n    onAuthStateChanged(auth, (user) => {\n        if (user) {\n            //If the user exists, check if they've completed their profile w/ bday info\n            const userRef = firebase.database().ref(\"users/\" +user.uid);\n            userRef.once(\"value\", (snapshot) => {\n                const userData = snapshot.val();\n                if (userData && userData.profileComplete) {\n                    //If profileComplete is true, then redeirct to User Home\n                    navigate(\"/home\");\n                } else {\n                    //If no profile exists or incomplete, redirect to Input Profile\n                    navigate(\"/inputprofile\");\n                }\n            });\n        }\n    });\n\n    return () => {\n        ui.reset();\n    };\n\n\n\n\n\n\n}\n\nexport default Login"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,eAAe;AAClG,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,KAAKC,UAAU,MAAM,YAAY;AACxC,OAAO,gCAAgC;AACvC,SAAQC,GAAG,QAAO,gBAAgB;AAClC,SAAQC,WAAW,QAAO,kBAAkB;AAE5C,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAEbV,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,EAAE,GACJL,UAAU,CAACM,IAAI,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,IACpC,IAAIR,UAAU,CAACM,IAAI,CAACC,MAAM,CAACZ,OAAO,CAACM,GAAG,CAAC,CAAC;IAEhDI,EAAE,CAACI,KAAK,CAAC,4BAA4B,EAAE;MACnCC,aAAa,EAAE,CACX;QACIC,QAAQ,EAAEf,kBAAkB,CAACgB,WAAW;QACxCC,gBAAgB,EAAE;UAChBC,MAAM,EAAE;QACV;MACF,CAAC,EACH;QACIH,QAAQ,EAAEd,iBAAiB,CAACe;MAChC,CAAC,CACJ;MACDG,gBAAgB,EAAE;IACtB,CAAC,CAAC;EACF,CAAC,EAAC,EAAE,CAAC;;EAGL;EACA,MAAMT,IAAI,GAAEX,OAAO,CAACM,GAAG,CAAC;EACxBH,kBAAkB,CAACQ,IAAI,EAAGU,IAAI,IAAK;IAC/B,IAAIA,IAAI,EAAE;MACN;MACA,MAAMC,OAAO,GAAGlB,QAAQ,CAACmB,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,QAAQ,GAAEH,IAAI,CAACI,GAAG,CAAC;MAC3DH,OAAO,CAACI,IAAI,CAAC,OAAO,EAAGC,QAAQ,IAAK;QAChC,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;QAC/B,IAAID,QAAQ,IAAIA,QAAQ,CAACE,eAAe,EAAE;UACtC;UACAC,QAAQ,CAAC,OAAO,CAAC;QACrB,CAAC,MAAM;UACH;UACAA,QAAQ,CAAC,eAAe,CAAC;QAC7B;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EAEF,OAAO,MAAM;IACTrB,EAAE,CAACsB,KAAK,CAAC,CAAC;EACd,CAAC;AAOL;AAACvB,EAAA,CArDQD,KAAK;AAAAyB,EAAA,GAALzB,KAAK;AAuDd,eAAeA,KAAK;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}